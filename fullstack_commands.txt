-----------------------------------------------------------------------------------------------------------------------------------------------------------------
FRONTEND  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Create new Angular Project
-----------------------------
- Install node.js

- Install CLI using npm 
    $ npm install -g @angular/cli

- Create a new angular project
    $ ng new my-app
    
 
 
* Run an existing angular project
----------------------------------

- Go to project root folder
    $ npm install    
    $ npm update
    $ npm start / $ ng serve

    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
BACKEND 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* SpringBoot
-------------
- Goals:
    > Enable building production ready applications quickly
    > Provide common nono-functional features:
        - Embedded servers
        - Metrics
        - Healt checks
        - Externalized confifuration
- IS NOT:
    > Zero code generator
    > Neither an application server nor web server
    

    
* SpringBoot vs Spring MVC
---------------------------
- What is the core problem that Spring Framework solves?
    R: Dependency Injection or IoC Inversion of Control
- What is the core problem that Spring MVC Framework solves?
    R: Dispatcher Servlet, ModelandView and ViewResolver
- What do we need SPRINGBOOT?
    R: To CONFIGURE AUTOMATICALLY the features of Spring Frameworks adding this frameworks to the CLASSPATH as jars



* Initialize a SpringBoot project using SPRING INITIALIZR
----------------------------------------------------------
- start.spring.io

- Components used: Srpng web, Devtools, JPA, H2



* SpringBoot Project
------------------------
- @SpringBootApplication	-> Initalizes Spring (Component Scan) and SpringBoot (Auto Configuration)
- SpringApplication.run()	-> Launches a SpringBoot Application



* SpringBoot STARTERS
----------------------
- Dependencies SpringBoot uses to start and auto-configure features like spring-webmvc, spring-jdbc, etc.

- Some Important Starters:
	> spring-boot-starter-parent		-> Contains version of dependencies and default java version
    > spring-boot-starter-web-services  -> SOAP web service
    > spring-boot-starter-web           -> Web and RESTful application
    > spring-boot-starter-test          -> Unit testing and integration testing
    > spring-boot-starter-hateoas       -> For hateos use
    > spring-boot-starter-jdbc          -> Traditional JDBC
    > spring-boot-starter-security      -> Authentication and Authorization using Spring Secutiry
    > spring-boot-starter-data-jpa      -> sprinf data JPA with Hibernate
    > spring-boot-starter-cache         -> Enabling Spring Framework's caching support
    > spring-boot-starter-data-rest     -> Expose simple REST Service using Spring Data REST
		


* Java Restful WebService
------------------------
@RestController		-> Annotate the class to be a restfull web service
@GetMapping("path")	-> Annotate the method to be a GET operation from the service
@PathVariable		-> To use variables coming in request path



* Calling Backend Web Services from frontend
------------------------------------------
- Description: Calling a backend webservice method from angular 
               this.welcomeDataService.executeHelloWorldBeanService().subscribe();
  Error: Access to XMLHttpRequest at 'http://localhost:8080/hello-world-bean' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
  Solution: Adding into RestController class the ability that frontend (http://localhost:4200) can reach backend webservice 
            @CrossOrigin(origins="http://localhost:4200") 
            
            

* Spring-Secutiry            
---------------------
- add dependency
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    
- WebSecurityConfigurerAdapter
    * Extend this class in order to configure the incoming http request and be able to receive them from frontend
    
    * Annotate class with these:
      @Configuration
      @EnableWebSecurity
    
    * Override methis configure(HttpSecurity)
    @Override
	protected void configure(HttpSecurity http) throws Exception {
		http
			.csrf().disable()
			.authorizeRequests()
			.antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
				.anyRequest().authenticated()
				.and()
			//.formLogin().and()
			.httpBasic();
	}	
	
    
            
* JWT
------------------				
- Adding JWT dependencies
    <!-- JWT -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.9.1</version>
    </dependency>

- Add JWT classes

- Get JWT token
    POST -> http://localhost:8089/authenticate
    HEADERS -> Origin = http://localhost:4200
    BODY -> { "username":"user", password":"123"}
    RESULT:
    {
        "token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJpbjI4bWludXRlcyIsImV4cCI6MTU4NjYzNjc0MCwiaWF0IjoxNTg2MDMxOTQwfQ.RXwLT-dusnPUGHbvInHEWOEP5jWwOWm-5FjOn9wqOQaUb9amgCBcS8o8-zBhEOAkXfr7FZjrQI8gqJ9hiO6c8g"
    }
    
-  Use JWT tocket to do a app request
    GET -> http://localhost:8089/users/mrx/todos
    HEADERS
        Origin = http://localhost:4200
        Authorization = Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJpbjI4bWludXRlcyIsImV4cCI6MTU4NjYzNjc0MCwiaWF0IjoxNTg2MDMxOTQwfQ.RXwLT-dusnPUGHbvInHEWOEP5jWwOWm-5FjOn9wqOQaUb9amgCBcS8o8-zBhEOAkXfr7FZjrQI8gqJ9hiO6c8g
    RESULT: the service response   

- Add new user:
    - Create a new Encoder password
        public static void main(String[] args) {
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            for (int i=0; i<=9; i++) {
                String encoderString = encoder.encode("123");
                System.out.println(encoderString); // 10th code -> $2a$10$jYvyNSKquhdMGL0HJSrZ6e6P/a4G22ao8R1XB.ei27J6gsqCoaNlS
            }		
        }
    
    - Add user and password to JwtInMemoryUserDetailsService.java
      static {        
        inMemoryUserList.add(new JwtUserDetails(1L, "user",
                "$2a$10$jYvyNSKquhdMGL0HJSrZ6e6P/a4G22ao8R1XB.ei27J6gsqCoaNlS", "ROLE_USER_2"));    
      }


      
* JPA and H2
----------------
- Convert Bean to Entity from package javax.persistence.*
    @Entity: Tell java persistence that this bean is treated as a table.
    @Id: Set the table ID column (The java type should be a Wrapper class)
    @GeneratedValue: Tells that this will be an auto incremented value, commonly used for IDs
    
- JPA and H2 information properties
    # JPA
    spring.jpa.show-sql=true
    spring.h2.console.enabled=true 

- Add data.sql resource file into src/main/java/resources   
    > Add the insert into todo statements

- Enter to H2 condifuration console: localhost:8089/h2-console 
    > Ensure JDBC URL = jdbc:h2:mem:testdb
    > connect to get database environment
    
- Class JpaRepository<T, ID> helps to have all basic database operations and you can build your own.
    > Example: to findByUserName(String userName) - The class anotated as Entity must have a property "userName"
     
    

